{"version":3,"sources":["../node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js","app/views/scrum-board/AppScrumBoard.jsx"],"names":["InputAdornment","React","props","ref","children","classes","className","_props$component","component","Component","_props$disablePointer","disablePointerEvents","_props$disableTypogra","disableTypography","position","variantProp","variant","other","_objectWithoutProperties","muiFormControl","useFormControl","FormControlContext","Provider","value","_extends","clsx","root","hiddenLabel","filled","positionStart","positionEnd","margin","marginDense","Typography","color","withStyles","display","height","maxHeight","alignItems","whiteSpace","marginTop","marginRight","marginLeft","pointerEvents","name","AppScrumBoard","useState","open","setOpen","textFieldValue","setTextFieldValue","useSelector","state","scrumboard","boardList","dispatch","useDispatch","useEffect","getAllBoard","openEditorDialog","handleChange","event","key","shiftKey","target","handleAddNewBoard","title","trim","addNewBoard","container","spacing","map","board","id","item","lg","md","sm","xs","to","elevation","onClickAway","size","onChange","onKeyDown","label","autoFocus","fullWidth","InputProps","endAdornment","onClick","fontSize"],"mappings":"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","file":"static/js/79.ab9d4347.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {\n      'start': classes.positionStart,\n      'end': classes.positionEnd\n    }[position], muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);","import React, { useState, useEffect } from 'react'\nimport {\n    Card,\n    Grid,\n    Button,\n    ClickAwayListener,\n    TextField,\n    InputAdornment,\n    IconButton,\n    Icon,\n} from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport { getAllBoard, addNewBoard } from '../../redux/actions/ScrumBoardActions'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst AppScrumBoard = () => {\n    const [open, setOpen] = useState(false)\n    const [textFieldValue, setTextFieldValue] = useState('')\n\n    const { boardList = [] } = useSelector((state) => state.scrumboard)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getAllBoard())\n    }, [dispatch])\n\n    const openEditorDialog = (value) => {\n        setOpen(value)\n    }\n\n    const handleChange = (event) => {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            handleAddNewBoard()\n        } else setTextFieldValue(event.target.value)\n    }\n\n    const handleAddNewBoard = () => {\n        let title = textFieldValue.trim()\n        if (title !== '') {\n            dispatch(addNewBoard(title))\n            setTextFieldValue('')\n        }\n    }\n\n    return (\n        <div className=\"m-sm-30\">\n            <Grid container spacing={2}>\n                {boardList.map((board) => (\n                    <Grid key={board.id} item lg={3} md={3} sm={12} xs={12}>\n                        <Link to={`/scrum-board/${board.id}`}>\n                            <Card\n                                className=\"p-6 cursor-pointer h-152\"\n                                elevation={3}\n                            >\n                                <h5 className=\"whitespace-pre-wrap capitalize m-0 font-medium\">\n                                    {board.title}\n                                </h5>\n                            </Card>\n                        </Link>\n                    </Grid>\n                ))}\n                <Grid item lg={3} md={3} sm={12} xs={12}>\n                    {open ? (\n                        <ClickAwayListener\n                            onClickAway={() => openEditorDialog(false)}\n                        >\n                            <Card className=\"p-6 h-152 w-288\" elevation={3}>\n                                <TextField\n                                    size=\"small\"\n                                    onChange={handleChange}\n                                    onKeyDown={handleChange}\n                                    className=\"mb-3\"\n                                    variant=\"outlined\"\n                                    label=\"Board Title\"\n                                    value={textFieldValue}\n                                    autoFocus\n                                    fullWidth\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton\n                                                    size=\"small\"\n                                                    onClick={() =>\n                                                        openEditorDialog(false)\n                                                    }\n                                                >\n                                                    <Icon fontSize=\"small\">\n                                                        clear\n                                                    </Icon>\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <div className=\"flex justify-end\">\n                                    <Button\n                                        onClick={handleAddNewBoard}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                    >\n                                        Add\n                                    </Button>\n                                </div>\n                            </Card>\n                        </ClickAwayListener>\n                    ) : (\n                        <Card\n                            onClick={() => openEditorDialog(true)}\n                            className=\"p-6 flex items-center justify-center cursor-pointer h-150px\"\n                            elevation={3}\n                        >\n                            <div className=\"text-primary text-center font-medium\">\n                                <h1 className=\"m-0 text-primary font-normal\">\n                                    +\n                                </h1>\n                                <div>Create New Board</div>\n                            </div>\n                        </Card>\n                    )}\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default AppScrumBoard\n"],"sourceRoot":""}