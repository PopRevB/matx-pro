{"version":3,"sources":["app/views/invoice/InvoiceService.js","app/views/invoice/InvoiceViewer.jsx","app/views/invoice/InvoiceEditor.jsx","app/views/invoice/InvoiceDetails.jsx"],"names":["getAllInvoice","axios","get","getInvoiceById","id","data","deleteInvoice","invoice","post","addInvoice","updateInvoice","useStyles","makeStyles","palette","visibility","position","top","left","right","height","invoiceViewer","fontSize","InvoiceViewer","toggleInvoiceEditor","useState","state","setState","useParams","classes","useEffect","then","res","subTotalCost","orderNo","buyer","seller","item","invoiceItemList","status","vat","date","className","clsx","to","IconButton","Icon","Button","variant","color","onClick","window","print","format","Date","getTime","Divider","name","address","Card","elevation","Table","TableHead","TableRow","TableCell","TableBody","map","index","unit","price","key","align","invoiceEditor","initialValues","currency","loading","InvoiceEditor","isNewInvoice","isAlive","setIsAlive","history","useHistory","generateRandomId","useCallback","tempId","Math","random","toString","substr","length","handleChange","event","persist","target","value","handleSellerBuyerChange","fieldName","handleIvoiceListChange","tempItemList","element","i","onSubmit","tempState","push","onError","errors","type","disabled","label","fullWidth","onChange","validators","errorMessages","FormControl","component","RadioGroup","aria-label","FormControlLabel","control","Radio","labelPlacement","utils","DateFnsUtils","margin","inputVariant","autoOk","KeyboardButtonProps","Grid","container","justify","spacing","multiline","rowsMax","splice","deleteItemFromInvoiceList","InvoiceDetails","showInvoiceEditor","setShowInvoiceEditor","setIsNewInvoice"],"mappings":"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","file":"static/js/74.88aaaa4b.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const getAllInvoice = () => {\n    return axios.get('/api/invoices/all')\n}\nexport const getInvoiceById = (id) => {\n    return axios.get('/api/invoices', { data: id })\n}\nexport const deleteInvoice = (invoice) => {\n    return axios.post('/api/invoices/delete', invoice)\n}\nexport const addInvoice = (invoice) => {\n    return axios.post('/api/invoices/add', invoice)\n}\nexport const updateInvoice = (invoice) => {\n    return axios.post('/api/invoices/update', invoice)\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    Icon,\n    Button,\n    Divider,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    IconButton,\n    Card,\n} from '@material-ui/core'\nimport { Link, useParams } from 'react-router-dom'\nimport { getInvoiceById } from './InvoiceService'\nimport { format } from 'date-fns'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\n    '@global': {\n        '@media print': {\n            'body, *, html': {\n                visibility: 'hidden',\n            },\n            '#print-area': {\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                right: 0,\n                height: '100%',\n                '& *': {\n                    visibility: 'visible',\n                },\n            },\n        },\n    },\n    invoiceViewer: {\n        '& h5': {\n            fontSize: 15,\n        },\n    },\n}))\n\nconst InvoiceViewer = ({ toggleInvoiceEditor }) => {\n    const [state, setState] = useState({})\n\n    const { id } = useParams()\n    const classes = useStyles()\n\n    useEffect(() => {\n        if (id !== 'add')\n            getInvoiceById(id).then((res) => {\n                setState({ ...res.data })\n            })\n    }, [id])\n\n    const handlePrint = () => window.print()\n\n    let subTotalCost = 0\n    let {\n        orderNo,\n        buyer,\n        seller,\n        item: invoiceItemList = [],\n        status,\n        vat,\n        date,\n    } = state\n\n    return (\n        <div className={clsx('invoice-viewer py-4', classes.invoiceViewer)}>\n            <div className=\"viewer_actions px-4 mb-5 flex items-center justify-between\">\n                <Link to=\"/invoice/list\">\n                    <IconButton>\n                        <Icon>arrow_back</Icon>\n                    </IconButton>\n                </Link>\n                <div>\n                    <Button\n                        className=\"mr-4 py-2\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => toggleInvoiceEditor()}\n                    >\n                        Edit Invoice\n                    </Button>\n                    <Button\n                        onClick={handlePrint}\n                        className=\"py-2\"\n                        variant=\"contained\"\n                        color=\"secondary\"\n                    >\n                        Print Invoice\n                    </Button>\n                </div>\n            </div>\n\n            <div id=\"print-area\">\n                <div className=\"viewer__order-info px-4 mb-4 flex justify-between\">\n                    <div>\n                        <h5 className=\"mb-2\">Order Info</h5>\n                        <p className=\"mb-4\">Order Number</p>\n                        <p className=\"mb-0\"># {orderNo}</p>\n                    </div>\n                    <div className=\"text-right\">\n                        <h5 className=\"font-normal mb-4 capitalize\">\n                            <strong>Order status:</strong> {status}\n                        </h5>\n                        <h5 className=\"font-normal capitalize\">\n                            <strong>Order date: </strong>{' '}\n                            <span>\n                                {date\n                                    ? format(\n                                          new Date(date).getTime(),\n                                          'MMMM dd, yyyy'\n                                      )\n                                    : ''}\n                            </span>\n                        </h5>\n                    </div>\n                </div>\n\n                <Divider />\n\n                <div className=\"viewer__billing-info px-4 py-5 flex justify-between\">\n                    <div>\n                        <h5 className=\"mb-2\">Bill From</h5>\n                        <p className=\"mb-4\">{seller ? seller.name : null}</p>\n                        <p className=\"mb-0 whitespace-pre-wrap\">\n                            {seller ? seller.address : null}\n                        </p>\n                    </div>\n                    <div className=\"text-right w-full\">\n                        <h5 className=\"mb-2\">Bill To</h5>\n                        <p className=\"mb-4\">{buyer ? buyer.name : null}</p>\n                        <p className=\"mb-0 whitespace-pre-wrap\">\n                            {buyer ? buyer.address : null}\n                        </p>\n                    </div>\n                    <div />\n                </div>\n\n                <Card className=\"mb-4\" elevation={0}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className=\"pl-sm-24\">#</TableCell>\n                                <TableCell className=\"px-0\">\n                                    Item Name\n                                </TableCell>\n                                <TableCell className=\"px-0\">\n                                    Unit Price\n                                </TableCell>\n                                <TableCell className=\"px-0\">Unit</TableCell>\n                                <TableCell className=\"px-0\">Cost</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {invoiceItemList.map((item, index) => {\n                                subTotalCost += item.unit * item.price\n                                return (\n                                    <TableRow key={index}>\n                                        <TableCell\n                                            className=\"pl-sm-24 capitalize\"\n                                            align=\"left\"\n                                        >\n                                            {index + 1}\n                                        </TableCell>\n                                        <TableCell\n                                            className=\"pl-0 capitalize\"\n                                            align=\"left\"\n                                        >\n                                            {item.name}\n                                        </TableCell>\n                                        <TableCell\n                                            className=\"pl-0 capitalize\"\n                                            align=\"left\"\n                                        >\n                                            {item.price}\n                                        </TableCell>\n                                        <TableCell className=\"pl-0 capitalize\">\n                                            {item.unit}\n                                        </TableCell>\n                                        <TableCell className=\"pl-0\">\n                                            {item.unit * item.price}\n                                        </TableCell>\n                                    </TableRow>\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                </Card>\n\n                <div className=\"px-4 flex justify-end\">\n                    <div className=\"flex\">\n                        <div className=\"pr-12\">\n                            <p className=\"mb-4\">Sub Total:</p>\n                            <p className=\"mb-4\">Vat(%):</p>\n                            <strong>\n                                <p>Grand Total:</p>\n                            </strong>\n                        </div>\n                        <div>\n                            <p className=\"mb-4\">{subTotalCost}</p>\n                            <p className=\"mb-4\">{vat}</p>\n                            <p>\n                                <strong>\n                                    $\n                                    {\n                                        (subTotalCost +=\n                                            (subTotalCost * vat) / 100)\n                                    }\n                                </strong>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default InvoiceViewer\n","import React, { useState, useEffect } from 'react'\nimport {\n    Button,\n    Radio,\n    FormControl,\n    FormControlLabel,\n    Divider,\n    RadioGroup,\n    Grid,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n} from '@material-ui/core'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { getInvoiceById, addInvoice, updateInvoice } from './InvoiceService'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport { useCallback } from 'react'\n\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\n    invoiceEditor: {\n        '& h5': {\n            fontSize: 15,\n        },\n    },\n}))\n\nconst InvoiceEditor = ({ isNewInvoice, toggleInvoiceEditor }) => {\n    const [isAlive, setIsAlive] = useState(true)\n    const [state, setState] = useState(initialValues)\n\n    const history = useHistory()\n    const { id } = useParams()\n    const classes = useStyles()\n\n    const generateRandomId = useCallback(() => {\n        let tempId = Math.random().toString()\n        let id = tempId.substr(2, tempId.length - 1)\n        setState((state) => ({ ...state, id }))\n    }, [])\n\n    const handleChange = (event) => {\n        event.persist()\n        setState({ ...state, [event.target.name]: event.target.value })\n    }\n\n    const handleSellerBuyerChange = (event, fieldName) => {\n        event.persist()\n        setState({\n            ...state,\n            [fieldName]: {\n                ...state[fieldName],\n                [event.target.name]: event.target.value,\n            },\n        })\n    }\n\n    const handleIvoiceListChange = (event, index) => {\n        let tempItemList = [...state.item]\n        tempItemList.map((element, i) => {\n            if (index === i) element[event.target.name] = event.target.value\n            return element\n        })\n\n        setState({\n            ...state,\n            item: tempItemList,\n        })\n    }\n\n    const addItemToInvoiceList = () => {\n        let tempItemList = [...state.item]\n        tempItemList.push({\n            name: '',\n            unit: '',\n            price: '',\n        })\n        setState({\n            ...state,\n            item: tempItemList,\n        })\n    }\n\n    const deleteItemFromInvoiceList = (index) => {\n        let tempItemList = [...state.item]\n        tempItemList.splice(index, 1)\n\n        setState({\n            ...state,\n            item: tempItemList,\n        })\n    }\n\n    const handleDateChange = (date) => {\n        setState({ ...state, date })\n    }\n\n    const handleSubmit = () => {\n        setState({ ...state, loading: true })\n        let tempState = { ...state }\n        delete tempState.loading\n        if (isNewInvoice)\n            addInvoice(tempState).then(() => {\n                setState({ ...state, loading: false })\n                history.push(`/invoice/${state.id}`)\n                toggleInvoiceEditor()\n            })\n        else\n            updateInvoice(tempState).then(() => {\n                setState({ ...state, loading: false })\n                toggleInvoiceEditor()\n            })\n    }\n\n    useEffect(() => {\n        if (!isNewInvoice) {\n            getInvoiceById(id).then(({ data }) => {\n                if (isAlive) setState({ ...data })\n            })\n        } else {\n            generateRandomId()\n        }\n    }, [id, isNewInvoice, isAlive, generateRandomId])\n\n    useEffect(() => {\n        return () => setIsAlive(false)\n    }, [])\n\n    let subTotalCost = 0\n    let {\n        orderNo,\n        buyer,\n        seller,\n        item: invoiceItemList = [],\n        status,\n        vat,\n        date,\n        currency,\n        loading,\n    } = state\n\n    return (\n        <div className={clsx('invoice-viewer py-4', classes.invoiceEditor)}>\n            <ValidatorForm onSubmit={handleSubmit} onError={(errors) => null}>\n                <div className=\"viewer_actions px-4 flex justify-end\">\n                    <div className=\"mb-6\">\n                        <Button\n                            type=\"button\"\n                            className=\"mr-4 py-2\"\n                            variant=\"text\"\n                            onClick={() => toggleInvoiceEditor()}\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            className=\"py-2\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={loading}\n                        >\n                            Save\n                        </Button>\n                    </div>\n                </div>\n\n                <div className=\"viewer__order-info px-4 mb-4 flex justify-between\">\n                    <div>\n                        <h5 className=\"mb-2\">Order Info</h5>\n                        <p className=\"mb-4\">Order Number</p>\n                        <TextValidator\n                            label=\"Order No.\"\n                            type=\"text\"\n                            fullWidth\n                            name=\"orderNo\"\n                            value={orderNo}\n                            onChange={handleChange}\n                            validators={['required']}\n                            errorMessages={['this field is required']}\n                        />\n                    </div>\n                    <div>\n                        <FormControl\n                            component=\"fieldset\"\n                            className=\"w-full mb-4\"\n                        >\n                            <RadioGroup\n                                aria-label=\"status\"\n                                name=\"status\"\n                                value={status}\n                                onChange={handleChange}\n                            >\n                                <FormControlLabel\n                                    className=\"h-32\"\n                                    value=\"pending\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label=\"Pending\"\n                                    labelPlacement=\"start\"\n                                />\n                                <FormControlLabel\n                                    className=\"h-32\"\n                                    value=\"processing\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label=\"Processing\"\n                                    labelPlacement=\"start\"\n                                />\n                                <FormControlLabel\n                                    className=\"h-32\"\n                                    value=\"delivered\"\n                                    control={<Radio color=\"secondary\" />}\n                                    label=\"Delivered\"\n                                    labelPlacement=\"start\"\n                                />\n                            </RadioGroup>\n                        </FormControl>\n\n                        <div className=\"text-right\">\n                            <h5 className=\"font-normal\">\n                                <strong>Order date: </strong>\n                            </h5>\n                        </div>\n\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                            <KeyboardDatePicker\n                                margin=\"none\"\n                                id=\"mui-pickers-date\"\n                                label=\"Order Date\"\n                                inputVariant=\"standard\"\n                                type=\"text\"\n                                autoOk={true}\n                                value={date}\n                                fullWidth\n                                format=\"MMMM dd, yyyy\"\n                                onChange={handleDateChange}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}\n                            />\n                        </MuiPickersUtilsProvider>\n                    </div>\n                </div>\n\n                <Divider />\n\n                <Grid\n                    className=\"px-4 py-5\"\n                    container\n                    justify=\"space-between\"\n                    spacing={4}\n                >\n                    <Grid item>\n                        <div>\n                            <h5 className=\"mb-5 \">Bill From</h5>\n                            <TextValidator\n                                className=\"mb-5\"\n                                label=\"Seller Name\"\n                                onChange={(event) =>\n                                    handleSellerBuyerChange(event, 'seller')\n                                }\n                                type=\"text\"\n                                name=\"name\"\n                                fullWidth\n                                value={seller ? seller.name : null}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                            />\n                            <TextValidator\n                                label=\"Seller Name\"\n                                type=\"text\"\n                                onChange={(event) =>\n                                    handleSellerBuyerChange(event, 'seller')\n                                }\n                                name=\"address\"\n                                fullWidth\n                                multiline={true}\n                                rowsMax={4}\n                                value={seller ? seller.address : null}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                            />\n                        </div>\n                    </Grid>\n                    <Grid item>\n                        <div className=\"text-right\">\n                            <h5 className=\"mb-5\">Bill To</h5>\n                            <TextValidator\n                                className=\"mb-5\"\n                                label=\"Buyer Name\"\n                                onChange={(event) =>\n                                    handleSellerBuyerChange(event, 'buyer')\n                                }\n                                type=\"text\"\n                                name=\"name\"\n                                fullWidth\n                                value={buyer ? buyer.name : null}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                            />\n                            <TextValidator\n                                label=\"Buyer Address\"\n                                onChange={(event) =>\n                                    handleSellerBuyerChange(event, 'buyer')\n                                }\n                                type=\"text\"\n                                name=\"address\"\n                                fullWidth\n                                multiline={true}\n                                rowsMax={4}\n                                value={buyer ? buyer.address : null}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                            />\n                        </div>\n                    </Grid>\n                </Grid>\n\n                {/* Item list for editing */}\n                <Table className=\"mb-4\">\n                    <TableHead>\n                        <TableRow className=\"bg-default\">\n                            <TableCell className=\"pl-sm-24\">#</TableCell>\n                            <TableCell className=\"px-0\">Item Name</TableCell>\n                            <TableCell className=\"px-0\">Unit Price</TableCell>\n                            <TableCell className=\"px-0\">Unit</TableCell>\n                            <TableCell className=\"px-0\">Cost</TableCell>\n                            <TableCell className=\"px-0\">Action</TableCell>\n                        </TableRow>\n                    </TableHead>\n\n                    <TableBody>\n                        {invoiceItemList.map((item, index) => {\n                            subTotalCost += item.price * item.unit\n                            return (\n                                <TableRow key={index}>\n                                    <TableCell\n                                        className=\"pl-sm-24 capitalize\"\n                                        align=\"left\"\n                                    >\n                                        {index + 1}\n                                    </TableCell>\n\n                                    <TableCell\n                                        className=\"pl-0 capitalize\"\n                                        align=\"left\"\n                                    >\n                                        <TextValidator\n                                            label=\"Item Name\"\n                                            onChange={(event) =>\n                                                handleIvoiceListChange(\n                                                    event,\n                                                    index\n                                                )\n                                            }\n                                            type=\"text\"\n                                            name=\"name\"\n                                            fullWidth\n                                            value={item ? item.name : null}\n                                            validators={['required']}\n                                            errorMessages={[\n                                                'this field is required',\n                                            ]}\n                                        />\n                                    </TableCell>\n\n                                    <TableCell\n                                        className=\"pl-0 capitalize\"\n                                        align=\"left\"\n                                    >\n                                        <TextValidator\n                                            label=\"Item Price\"\n                                            onChange={(event) =>\n                                                handleIvoiceListChange(\n                                                    event,\n                                                    index\n                                                )\n                                            }\n                                            type=\"number\"\n                                            name=\"price\"\n                                            fullWidth\n                                            value={item ? item.price : null}\n                                            validators={['required']}\n                                            errorMessages={[\n                                                'this field is required',\n                                            ]}\n                                        />\n                                    </TableCell>\n\n                                    <TableCell\n                                        className=\"pl-0 capitalize\"\n                                        align=\"left\"\n                                    >\n                                        <TextValidator\n                                            label=\"Item Unit\"\n                                            onChange={(event) =>\n                                                handleIvoiceListChange(\n                                                    event,\n                                                    index\n                                                )\n                                            }\n                                            type=\"number\"\n                                            name=\"unit\"\n                                            fullWidth\n                                            value={item ? item.unit : null}\n                                            validators={['required']}\n                                            errorMessages={[\n                                                'this field is required',\n                                            ]}\n                                        />\n                                    </TableCell>\n\n                                    <TableCell\n                                        className=\"pl-0 capitalize\"\n                                        align=\"left\"\n                                    >\n                                        {item.unit * item.price}\n                                    </TableCell>\n\n                                    <TableCell\n                                        className=\"pl-0 capitalize\"\n                                        align=\"left\"\n                                    >\n                                        <Button\n                                            onClick={() =>\n                                                deleteItemFromInvoiceList(index)\n                                            }\n                                        >\n                                            Delete\n                                        </Button>\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        })}\n                    </TableBody>\n                </Table>\n                <div className=\"flex justify-end px-4 mb-4\">\n                    <Button onClick={addItemToInvoiceList}>Add Item</Button>\n                </div>\n\n                {/* total cost calculation */}\n                <div className=\"px-4 flex justify-end\">\n                    <div className=\"flex\">\n                        <div className=\"pr-12\">\n                            <p className=\"mb-8\">Sub Total:</p>\n                            <p className=\"mb-12\">Vat(%):</p>\n                            <p className=\"mb-5\">currency:</p>\n                            <strong>\n                                <p>Grand Total:</p>\n                            </strong>\n                        </div>\n                        <div>\n                            <p className=\"mb-4\">{subTotalCost}</p>\n                            <TextValidator\n                                className=\"mb-4\"\n                                label=\"Vat\"\n                                onChange={handleChange}\n                                type=\"number\"\n                                name=\"vat\"\n                                value={vat}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                            />\n                            <br />\n                            <TextValidator\n                                label=\"Currency\"\n                                onChange={handleChange}\n                                type=\"text\"\n                                name=\"currency\"\n                                value={currency}\n                                validators={['required']}\n                                errorMessages={['this field is required']}\n                            />\n                            <p className=\"mt-4\">\n                                <strong>\n                                    {currency}\n                                    {subTotalCost + (subTotalCost * vat) / 100}\n                                </strong>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </ValidatorForm>\n        </div>\n    )\n}\n\nconst initialValues = {\n    id: '',\n    orderNo: '',\n    buyer: {\n        name: '',\n        address: '',\n    },\n    seller: {\n        name: '',\n        address: '',\n    },\n    item: [],\n    status: '',\n    vat: '',\n    date: new Date(),\n    currency: '',\n    loading: false,\n}\n\nexport default InvoiceEditor\n","import React, { useState, useEffect } from 'react'\nimport { Card } from '@material-ui/core'\nimport InvoiceViewer from './InvoiceViewer'\nimport InvoiceEditor from './InvoiceEditor'\nimport { useParams } from 'react-router-dom'\n\nconst InvoiceDetails = () => {\n    const [showInvoiceEditor, setShowInvoiceEditor] = useState(false)\n    const [isNewInvoice, setIsNewInvoice] = useState(false)\n\n    const { id } = useParams()\n\n    const toggleInvoiceEditor = () => {\n        setShowInvoiceEditor(!showInvoiceEditor)\n        setIsNewInvoice(false)\n    }\n\n    useEffect(() => {\n        if (id === 'add') {\n            setShowInvoiceEditor(true)\n            setIsNewInvoice(true)\n        }\n    }, [id])\n\n    return (\n        <Card elevation={6} className=\"m-sm-30\">\n            {showInvoiceEditor ? (\n                <InvoiceEditor\n                    toggleInvoiceEditor={toggleInvoiceEditor}\n                    isNewInvoice={isNewInvoice}\n                />\n            ) : (\n                <InvoiceViewer toggleInvoiceEditor={toggleInvoiceEditor} />\n            )}\n        </Card>\n    )\n}\n\nexport default InvoiceDetails\n"],"sourceRoot":""}