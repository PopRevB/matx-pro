{"version":3,"sources":["app/views/scrum-board/CardEditorDialog.jsx","app/views/scrum-board/ScrumBoardLabelBar.jsx","app/views/scrum-board/ScrumBoardCard.jsx","app/views/scrum-board/BoardList.jsx","app/views/scrum-board/ScrumBoardContainer.jsx","app/views/scrum-board/Board.jsx"],"names":["CardEditorDialog","open","card","handleClose","useState","state","setState","dispatch","useDispatch","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","useSelector","user","scrumboard","board","memberList","labelList","closeDialog","handleChange","event","target","id","value","name","cardMembers","member","boardMembers","find","checked","push","splice","indexOf","labels","label","item","parseInt","key","shiftKey","sendComment","comments","commentText","trim","generateRandomId","uid","userId","text","time","Date","useEffect","members","map","boardMemberId","modifiedLabelList","labelId","boardMember","boardId","title","description","attachments","Dialog","onClose","fullScreen","fullWidth","scroll","className","Icon","Input","type","autoFocus","onChange","disableUnderline","IconButton","size","onClick","Avatar","src","avatar","horizontalPosition","shouldCloseOnItemClick","menuButton","Tooltip","fontSize","FormControlLabel","control","Checkbox","some","Button","variant","color","Divider","TextField","multiline","htmlFor","component","multiple","Grid","container","spacing","file","lg","md","sm","xs","Card","elevation","url","alt","MenuItem","coverImage","index","removeAttachments","comment","getTimeDifference","photoURL","onKeyDown","inputProps","style","padding","listId","updateCardInList","useStyles","makeStyles","palette","root","width","height","borderRadius","overflow","marginRight","ScrumBoardLabelBar","classes","ScrumBoardCard","modifiedCardMemberList","length","BoardList","data","handleCardClick","shouldOpenTitleEditor","setShouldOpenTitleEditor","shouldOpenAddCard","setShouldOpenAddCard","cardTitleText","setCardTitleText","columnTitleText","setColumnTitleText","targetName","handleAddNewCard","handleRenameList","renameListInBoard","column","listTitle","openTitleEditor","openAddCard","addNewCardInList","cardTitle","handleListDelete","deleteListFromBoard","provided","snapshot","isDragging","ref","innerRef","draggableProps","dragHandleProps","droppableId","direction","ClickAwayListener","onClickAway","InputProps","endAdornment","InputAdornment","position","cardList","draggableId","placeholder","ScrumBoardContainer","list","handleAddList","setCard","shouldOpenDialog","setShouldOpenDialog","shouldOpenAddList","setShouldOpenAddList","columnTitle","setColumnTitle","handleDialogClose","handleAddListToggle","onDragEnd","result","source","destination","reorderList","reorderCardInList","moveCardInList","droppableProps","border","Board","useParams","getBoardById","getAllMembers","getAllLabels","memberId","deleteMemberFromBoard","addMemberInBoard","to","clsx","addListInBoard","cardData"],"mappings":"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","file":"static/js/104.43691436.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n    Dialog,\n    TextField,\n    Icon,\n    Avatar,\n    Button,\n    Divider,\n    IconButton,\n    Grid,\n    Card,\n    MenuItem,\n    Input,\n    FormControlLabel,\n    Checkbox,\n    Tooltip,\n    useMediaQuery,\n} from '@material-ui/core'\nimport { useTheme } from '@material-ui/core/styles'\nimport { getTimeDifference, generateRandomId } from 'utils.js'\nimport Scrollbar from 'react-perfect-scrollbar'\nimport { MatxMenu } from 'app/components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateCardInList } from '../../redux/actions/ScrumBoardActions'\n\nconst CardEditorDialog = ({ open, card, handleClose }) => {\n    const [state, setState] = useState({})\n\n    const dispatch = useDispatch()\n    const theme = useTheme()\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'))\n    const { user = {} } = useSelector((state) => state)\n    const { board = {}, memberList = [], labelList = [] } = useSelector(\n        (state) => state.scrumboard\n    )\n\n    const closeDialog = () => {\n        handleClose()\n    }\n\n    const makeCoverPhoto = (coverImage) => {\n        setState({\n            ...state,\n            coverImage,\n        })\n    }\n\n    const removeAttachments = (index) => {\n        let { attachments = [] } = state\n        attachments.splice(index, 1)\n        setState({\n            ...state,\n            attachments,\n        })\n    }\n\n    const handleChange = (event) => {\n        let target = event.target\n        let id = target.value\n\n        if (target.name === 'avatar') {\n            let { cardMembers, boardMembers } = state\n            let member = boardMembers.find((user) => user.id === id)\n\n            if (!target.checked) {\n                cardMembers.splice(cardMembers.indexOf(member), 1)\n                setState({ ...state, cardMembers })\n            } else {\n                cardMembers.push(member)\n                setState({ ...state, cardMembers })\n            }\n        } else if (target.name === 'label') {\n            let { labels } = state\n            let label = labelList.find((item) => item.id === parseInt(id))\n\n            if (!target.checked) {\n                labels.splice(labels.indexOf(label), 1)\n                setState({ ...state, labels })\n            } else {\n                labels.push(label)\n                setState({ ...state, labels })\n            }\n        } else if (\n            event.key === 'Enter' &&\n            !event.shiftKey &&\n            target.name === 'commentText'\n        ) {\n            setState({\n                ...state,\n                [event.target.name]: event.target.value,\n            })\n            sendComment()\n        } else {\n            setState({\n                ...state,\n                [event.target.name]: event.target.value,\n            })\n        }\n    }\n\n    const handleSave = () => {\n        let {\n            id,\n            title,\n            coverImage,\n            cardMembers = [],\n            labels = [],\n            description,\n            attachments = [],\n            comments = [],\n            listId,\n            boardId,\n        } = state\n\n        let card = {\n            id,\n            title,\n            coverImage,\n            members: cardMembers.map((member) => member.id),\n            labels: labels.map((item) => item.id),\n            description,\n            attachments,\n            comments,\n        }\n\n        dispatch(updateCardInList(boardId, listId, card))\n        closeDialog()\n    }\n\n    const sendComment = () => {\n        let { comments = [], commentText } = state\n\n        if (commentText.trim() !== '') {\n            comments.push({\n                id: generateRandomId(),\n                uid: user.userId,\n                text: commentText.trim(),\n                time: new Date(),\n            })\n            commentText = ''\n        }\n        setState({\n            ...state,\n            comments,\n            commentText,\n        })\n    }\n\n    useEffect(() => {\n        let {\n            members = [], //members in card\n            labels = [],\n        } = card\n\n        let cardMembers = members.map((boardMemberId) =>\n            memberList.find((member) => member.id === boardMemberId)\n        )\n        let modifiedLabelList = labels.map((labelId) =>\n            labelList.find((label) => label.id === labelId)\n        )\n        let boardMembers = board.members.map((boardMember) =>\n            memberList.find((member) => member.id === boardMember.id)\n        )\n\n        setState((state) => ({\n            ...state,\n            ...card,\n            boardId: board.id,\n            cardMembers,\n            boardMembers,\n            labels: [...modifiedLabelList],\n        }))\n    }, [card, labelList, memberList, board.id, board.members])\n\n    let {\n        title,\n        cardMembers = [],\n        boardMembers = [],\n        labels = [],\n        description,\n        attachments = [],\n        comments = [],\n        commentText,\n    } = state\n\n    return (\n        <Dialog\n            onClose={closeDialog}\n            open={open}\n            fullScreen={isMobile}\n            fullWidth={true}\n            scroll=\"body\"\n        >\n            <div className=\"scrum-board\">\n                <div className=\"px-sm-24 pt-sm-24\">\n                    <div className=\"flex items-center\">\n                        <div className=\"flex items-center flex-grow\">\n                            <Icon className=\"text-muted\">assignment</Icon>\n                            <Input\n                                className=\"flex-grow  ml-3 pl-3px pr-2 capitalize font-medium text-16\"\n                                type=\"text\"\n                                autoFocus\n                                name=\"title\"\n                                onChange={handleChange}\n                                disableUnderline={true}\n                                value={title}\n                            ></Input>\n                        </div>\n                        <IconButton size=\"small\" onClick={closeDialog}>\n                            <Icon>clear</Icon>\n                        </IconButton>\n                    </div>\n\n                    <div className=\"ml-10\">\n                        <p className=\"m-0 mb-4 text-small text-muted\">\n                            Tech Startup Board Hot Backlog\n                        </p>\n\n                        <div className=\"mb-4 flex flex-wrap justify-between\">\n                            <div>\n                                <h6 className=\"m-0 mb-2 uppercase text-muted\">\n                                    Card Members\n                                </h6>\n                                <div className=\"flex relative face-group\">\n                                    {cardMembers.map((member) => (\n                                        <Avatar\n                                            key={member.id}\n                                            className=\"avatar\"\n                                            src={member.avatar}\n                                        />\n                                    ))}\n                                    <MatxMenu\n                                        horizontalPosition=\"center\"\n                                        shouldCloseOnItemClick={false}\n                                        menuButton={\n                                            <Tooltip\n                                                title={'Add'}\n                                                fontSize=\"large\"\n                                            >\n                                                <Avatar className=\"avatar ml--3 cursor-pointer\">\n                                                    +\n                                                </Avatar>\n                                            </Tooltip>\n                                        }\n                                    >\n                                        {boardMembers.map((user) => (\n                                            <FormControlLabel\n                                                className=\"ml-0\"\n                                                key={user.id}\n                                                control={\n                                                    <Checkbox\n                                                        name=\"avatar\"\n                                                        checked={cardMembers.some(\n                                                            (member) =>\n                                                                member.id ===\n                                                                user.id\n                                                        )}\n                                                        onChange={handleChange}\n                                                        value={user.id}\n                                                    />\n                                                }\n                                                label={\n                                                    <div className=\"flex items-center\">\n                                                        <Avatar\n                                                            src={user.avatar}\n                                                            className=\"size-24\"\n                                                        ></Avatar>\n                                                        <span className=\"ml-3\">\n                                                            {user.name}\n                                                        </span>\n                                                    </div>\n                                                }\n                                            />\n                                        ))}\n                                    </MatxMenu>\n                                </div>\n                            </div>\n                            <div>\n                                <h6 className=\"m-0 mb-2 pb-3px uppercase text-muted\">\n                                    labels\n                                </h6>\n                                <div className=\"button-group\">\n                                    {labels.map((label) => (\n                                        <Button\n                                            key={label.id}\n                                            size=\"small\"\n                                            variant=\"contained\"\n                                            className={`capitalize mr-1 text-white text-small bg-${label.color}`}\n                                        >\n                                            {label.title}\n                                        </Button>\n                                    ))}\n                                    <MatxMenu\n                                        horizontalPosition=\"right\"\n                                        shouldCloseOnItemClick={false}\n                                        menuButton={\n                                            <Tooltip\n                                                title={'Add'}\n                                                fontSize=\"large\"\n                                            >\n                                                <Button\n                                                    className=\"bg-light-gray\"\n                                                    size=\"small\"\n                                                >\n                                                    +\n                                                </Button>\n                                            </Tooltip>\n                                        }\n                                    >\n                                        {labelList.map((label) => (\n                                            <FormControlLabel\n                                                className=\"ml-0\"\n                                                key={label.id}\n                                                control={\n                                                    <Checkbox\n                                                        checked={labels.some(\n                                                            (item) =>\n                                                                item.id ===\n                                                                label.id\n                                                        )}\n                                                        onChange={handleChange}\n                                                        value={label.id}\n                                                        name=\"label\"\n                                                    />\n                                                }\n                                                label={\n                                                    <div className=\"flex items-center\">\n                                                        <div\n                                                            className={`border-radius-4 size-24 bg-${label.color}`}\n                                                        ></div>\n                                                        <span className=\"ml-3\">\n                                                            {label.title}\n                                                        </span>\n                                                    </div>\n                                                }\n                                            />\n                                        ))}\n                                    </MatxMenu>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <Divider></Divider>\n\n                <Scrollbar className=\"relative pt-4 mb-4 max-h-380\">\n                    <div className=\"px-sm-24 pt-4\">\n                        <div className=\"flex items-center mb-2\">\n                            <Icon className=\"text-muted\">description</Icon>\n                            <h6 className=\"m-0 ml-4 uppercase text-muted\">\n                                description\n                            </h6>\n                        </div>\n                        <div className=\"ml-10 mb-4 flex\">\n                            <TextField\n                                className=\"text-muted\"\n                                onChange={handleChange}\n                                name=\"description\"\n                                value={description}\n                                variant=\"outlined\"\n                                fullWidth\n                                multiline\n                            />\n                        </div>\n\n                        <div className=\"flex justify-between items-center\">\n                            <div className=\"flex items-center\">\n                                <Icon className=\"text-muted\">attach_file</Icon>\n                                <h6 className=\"m-0 ml-4 uppercase text-muted\">\n                                    attachments\n                                </h6>\n                            </div>\n\n                            <label htmlFor=\"upload-file\">\n                                <Button\n                                    className=\"text-primary uppercase font-medium\"\n                                    component=\"span\"\n                                >\n                                    + add an attachment\n                                </Button>\n                            </label>\n                            <input\n                                className=\"hidden\"\n                                id=\"upload-file\"\n                                type=\"file\"\n                                multiple\n                            />\n                        </div>\n\n                        <div className=\"ml-10 mb-4\">\n                            <Grid container spacing={2}>\n                                {attachments.map((file, id) => (\n                                    <Grid\n                                        key={id}\n                                        item\n                                        lg={6}\n                                        md={6}\n                                        sm={12}\n                                        xs={12}\n                                    >\n                                        <Card\n                                            className=\"p-4 flex items-center bg-default h-full\"\n                                            elevation={2}\n                                        >\n                                            <div className=\"flex items-center border-radius-8\">\n                                                <img\n                                                    className=\"w-full\"\n                                                    src={file.url}\n                                                    alt=\"cover\"\n                                                />\n                                            </div>\n                                            <div className=\"ml-4\">\n                                                <h6 className=\"m-0 text-muted capitalize\">\n                                                    {file.name}\n                                                </h6>\n                                                <small className=\"text-muted text-small capitalize\">\n                                                    {file.size}\n                                                </small>\n                                            </div>\n                                            <MatxMenu\n                                                horizontalPosition=\"center\"\n                                                menuButton={\n                                                    <IconButton className=\"ml-4\">\n                                                        <Icon>more_vert</Icon>\n                                                    </IconButton>\n                                                }\n                                            >\n                                                <MenuItem\n                                                    className=\"flex items-center min-w-164\"\n                                                    onClick={() =>\n                                                        makeCoverPhoto(file.url)\n                                                    }\n                                                >\n                                                    <Icon> insert_photo </Icon>\n                                                    <span className=\"pl-4\">\n                                                        {' '}\n                                                        Make Cover{' '}\n                                                    </span>\n                                                </MenuItem>\n                                                <MenuItem\n                                                    onClick={() =>\n                                                        removeAttachments(id)\n                                                    }\n                                                    className=\"flex items-center min-w-164\"\n                                                >\n                                                    <Icon> delete </Icon>\n                                                    <span className=\"pl-4\">\n                                                        {' '}\n                                                        Remove{' '}\n                                                    </span>\n                                                </MenuItem>\n                                            </MatxMenu>\n                                        </Card>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </div>\n                    </div>\n\n                    <Divider className=\"my-4\"></Divider>\n\n                    <div className=\"px-sm-24\">\n                        <div className=\"flex items-center mb-2\">\n                            <Icon className=\"text-muted\">message</Icon>\n                            <h6 className=\"m-0 ml-4 uppercase text-muted\">\n                                comments\n                            </h6>\n                        </div>\n                        <div className=\"comments ml-10\">\n                            {comments.map((comment) => {\n                                let user = memberList.find(\n                                    (user) => user.id === comment.uid\n                                )\n                                return (\n                                    <div className=\"mb-4\" key={comment.id}>\n                                        <div className=\"flex items-center mb-2\">\n                                            <Avatar\n                                                className=\"avatar size-36\"\n                                                src={user.avatar}\n                                            />\n                                            <div className=\"ml-3\">\n                                                <h6 className=\"m-0\">\n                                                    {user.name}\n                                                </h6>\n                                                <small>\n                                                    {getTimeDifference(\n                                                        new Date(comment.time)\n                                                    )}{' '}\n                                                    ago\n                                                </small>\n                                            </div>\n                                        </div>\n                                        <p className=\"m-0 text-muted\">\n                                            {comment.text}\n                                        </p>\n                                    </div>\n                                )\n                            })}\n\n                            <div className=\"flex items-center mb-4\">\n                                <Avatar\n                                    className=\"avatar size-36\"\n                                    src={user.photoURL}\n                                />\n                                <div className=\"flex-grow flex\">\n                                    <TextField\n                                        className=\"ml-3 text-muted\"\n                                        onChange={handleChange}\n                                        onKeyDown={handleChange}\n                                        variant=\"outlined\"\n                                        name=\"commentText\"\n                                        value={commentText || ''}\n                                        fullWidth\n                                        inputProps={{\n                                            style: {\n                                                padding: '10px',\n                                            },\n                                        }}\n                                    />\n                                </div>\n                                <Button onClick={sendComment}>Send</Button>\n                            </div>\n                        </div>\n                    </div>\n                </Scrollbar>\n\n                <div className=\"px-sm-24 mb-3 flex justify-end\">\n                    <Button className=\"mr-3\" onClick={closeDialog}>\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={handleSave}\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        Save\n                    </Button>\n                </div>\n            </div>\n        </Dialog>\n    )\n}\n\nexport default CardEditorDialog\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\n    root: {\n        width: '32px',\n        height: '6px',\n        borderRadius: '6px',\n        overflow: 'hidden',\n        marginRight: '8px',\n    },\n}))\n\nconst ScrumBoardLabelBar = ({ color = 'primary' }) => {\n    const classes = useStyles()\n\n    return <div className={`bg-${color} ${classes.root}`}></div>\n}\n\nexport default ScrumBoardLabelBar\n","import React from 'react'\nimport ScrumBoardLabelBar from './ScrumBoardLabelBar'\nimport { Button, Icon, Avatar } from '@material-ui/core'\nimport { useSelector } from 'react-redux'\n\nconst ScrumBoardCard = ({ card }) => {\n    let {\n        title,\n        members = [], //members in card\n        labels = [],\n        coverImage,\n        attachments,\n        comments,\n    } = card\n\n    const { memberList = [], labelList = [] } = useSelector(\n        (state) => state.scrumboard\n    )\n\n    let modifiedCardMemberList = members.map((boardMemberId) =>\n        memberList.find((member) => member.id === boardMemberId)\n    )\n    let modifiedLabelList = labels.map((labelId) =>\n        labelList.find((label) => label.id === labelId)\n    )\n\n    return (\n        <div className=\"scrum-board-card\">\n            {coverImage && (\n                <img\n                    className=\"border-radius-4 w-full\"\n                    src={coverImage}\n                    alt=\"stair\"\n                />\n            )}\n            <div className=\"px-4 py-3\">\n                {modifiedLabelList.length !== 0 && (\n                    <div className=\"flex mb-3 font-medium\">\n                        {modifiedLabelList.map(\n                            (label) =>\n                                label && (\n                                    <ScrumBoardLabelBar\n                                        key={label.id}\n                                        color={label.color}\n                                    ></ScrumBoardLabelBar>\n                                )\n                        )}\n                    </div>\n                )}\n\n                <h6 className=\"m-0 font-medium\">{title}</h6>\n\n                {(comments.length !== 0 ||\n                    attachments.length !== 0 ||\n                    members.length !== 0) && (\n                    <div className=\"flex items-center justify-between mt-3 button-group text-small\">\n                        <div className=\"flex\">\n                            {comments.length !== 0 && (\n                                <Button size=\"small\">\n                                    <Icon\n                                        className=\"mr-1 text-small\"\n                                        fontSize=\"small\"\n                                    >\n                                        chat\n                                    </Icon>\n                                    <span>{comments.length}</span>\n                                </Button>\n                            )}\n                            {attachments.length !== 0 && (\n                                <Button size=\"small\">\n                                    <Icon\n                                        className=\"mr-1 text-small\"\n                                        fontSize=\"small\"\n                                    >\n                                        attach_file\n                                    </Icon>\n                                    <span>{attachments.length}</span>\n                                </Button>\n                            )}\n                        </div>\n                        <div className=\"flex relative face-group\">\n                            {modifiedCardMemberList.map(\n                                (member) =>\n                                    member && (\n                                        <Avatar\n                                            key={member.id}\n                                            className=\"avatar\"\n                                            src={member.avatar}\n                                        />\n                                    )\n                            )}\n                            {/* <Avatar className=\"number-avatar avatar\">+3</Avatar> */}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default ScrumBoardCard\n","import React, { useState, useEffect } from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport {\n    Card,\n    Icon,\n    MenuItem,\n    IconButton,\n    TextField,\n    InputAdornment,\n    ClickAwayListener,\n    Button,\n} from '@material-ui/core'\nimport ScrumBoardCard from './ScrumBoardCard'\nimport Scrollbar from 'react-perfect-scrollbar'\nimport { MatxMenu } from 'app/components'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    renameListInBoard,\n    deleteListFromBoard,\n    addNewCardInList,\n} from '../../redux/actions/ScrumBoardActions'\n\nconst BoardList = ({ data, handleCardClick }) => {\n    const [shouldOpenTitleEditor, setShouldOpenTitleEditor] = useState(false)\n    const [shouldOpenAddCard, setShouldOpenAddCard] = useState(false)\n    const [cardTitleText, setCardTitleText] = useState('')\n    const [columnTitleText, setColumnTitleText] = useState('')\n\n    const dispatch = useDispatch()\n    const { board = {} } = useSelector((state) => state.scrumboard)\n\n    const handleChange = (event) => {\n        let targetName = event.target.name\n        let value = event.target.value\n\n        if (targetName === 'cardTitleText') {\n            if (event.key === 'Enter' && !event.shiftKey) handleAddNewCard()\n            else setCardTitleText(value)\n        } else {\n            if (event.key === 'Enter' && !event.shiftKey) handleRenameList()\n            else setColumnTitleText(value)\n        }\n    }\n\n    const handleRenameList = () => {\n        dispatch(\n            renameListInBoard({\n                boardId: board.id,\n                listId: data.column.id,\n                listTitle: columnTitleText,\n            })\n        )\n        openTitleEditor(false)\n    }\n\n    const openTitleEditor = (value) => {\n        setShouldOpenTitleEditor(value)\n    }\n\n    const openAddCard = (value) => {\n        setShouldOpenAddCard(value)\n    }\n\n    const handleAddNewCard = () => {\n        if (cardTitleText.trim() !== '') {\n            dispatch(\n                addNewCardInList({\n                    boardId: board.id,\n                    listId: data.column.id,\n                    cardTitle: cardTitleText,\n                })\n            )\n            setCardTitleText('')\n        }\n    }\n\n    const handleListDelete = () => {\n        dispatch(\n            deleteListFromBoard({\n                boardId: board.id,\n                listId: data.column.id,\n            })\n        )\n    }\n\n    useEffect(() => {\n        let listTitle = data?.column?.title\n        if (listTitle) setColumnTitleText(listTitle)\n    }, [data])\n\n    let { provided, snapshot, column } = data\n\n    return (\n        <Card\n            className=\"mx-3 relative pt-2 w-288\"\n            elevation={snapshot.isDragging ? 10 : 3}\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={{\n                ...provided.draggableProps.style,\n            }}\n        >\n            <Droppable droppableId={column.id} direction=\"vertical\" type=\"card\">\n                {(provided, snapshot) => (\n                    <div ref={provided.innerRef} className=\"relative\">\n                        <div className=\"flex items-center justify-between pb-2\">\n                            {shouldOpenTitleEditor ? (\n                                <ClickAwayListener\n                                    onClickAway={() => openTitleEditor(false)}\n                                >\n                                    <TextField\n                                        className=\"pl-4\"\n                                        size=\"small\"\n                                        variant=\"outlined\"\n                                        value={columnTitleText}\n                                        onChange={handleChange}\n                                        onKeyDown={handleChange}\n                                        name=\"columnTitleText\"\n                                        InputProps={{\n                                            endAdornment: (\n                                                <InputAdornment position=\"end\">\n                                                    <IconButton\n                                                        size=\"small\"\n                                                        onClick={\n                                                            handleRenameList\n                                                        }\n                                                    >\n                                                        <Icon fontSize=\"small\">\n                                                            done\n                                                        </Icon>\n                                                    </IconButton>\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                    />\n                                </ClickAwayListener>\n                            ) : (\n                                <h4\n                                    className=\"m-0 flex-grow py-1 pl-4 capitalize\"\n                                    onClick={() => openTitleEditor(true)}\n                                >\n                                    {column.title}\n                                </h4>\n                            )}\n                            <MatxMenu\n                                horizontalPosition=\"right\"\n                                menuButton={\n                                    <IconButton>\n                                        <Icon>more_vert</Icon>\n                                    </IconButton>\n                                }\n                            >\n                                <MenuItem className=\"flex items-center min-w-148\">\n                                    <Icon> settings </Icon>\n                                    <span className=\"pl-4\"> Settings </span>\n                                </MenuItem>\n                                <MenuItem\n                                    onClick={handleListDelete}\n                                    className=\"flex items-center min-w-148\"\n                                >\n                                    <Icon> delete </Icon>\n                                    <span className=\"pl-4\"> Delete </span>\n                                </MenuItem>\n                            </MatxMenu>\n                        </div>\n\n                        <Scrollbar className=\"relative h-380 px-4\">\n                            {column.cardList.map((card, index) => (\n                                <Draggable\n                                    key={card.id}\n                                    draggableId={card.id}\n                                    index={index}\n                                    type=\"card\"\n                                >\n                                    {(provided, snapshot) => (\n                                        <Card\n                                            className=\"mb-4 border-radius-4 bg-light-gray\"\n                                            elevation={\n                                                snapshot.isDragging ? 10 : 3\n                                            }\n                                            onClick={() =>\n                                                handleCardClick({\n                                                    ...card,\n                                                    listId: column.id,\n                                                })\n                                            }\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={{\n                                                ...provided.draggableProps\n                                                    .style,\n                                            }}\n                                        >\n                                            <ScrumBoardCard\n                                                card={card}\n                                            ></ScrumBoardCard>\n                                        </Card>\n                                    )}\n                                </Draggable>\n                            ))}\n                        </Scrollbar>\n                        {provided.placeholder}\n                    </div>\n                )}\n            </Droppable>\n\n            {/* ===================================================== */}\n            {shouldOpenAddCard ? (\n                <ClickAwayListener onClickAway={() => openAddCard(false)}>\n                    <Card\n                        className=\"position-bottom border-radius-0 cursor-pointer p-4 w-full\"\n                        elevation={5}\n                    >\n                        <TextField\n                            size=\"small\"\n                            className=\"mb-3\"\n                            variant=\"outlined\"\n                            name=\"cardTitleText\"\n                            value={cardTitleText}\n                            fullWidth\n                            onChange={handleChange}\n                            onKeyDown={handleChange}\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            size=\"small\"\n                                            onClick={() => openAddCard(false)}\n                                        >\n                                            <Icon fontSize=\"small\">clear</Icon>\n                                        </IconButton>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                        <div className=\"flex justify-end\">\n                            <Button\n                                onClick={handleAddNewCard}\n                                variant=\"contained\"\n                                color=\"primary\"\n                            >\n                                Add\n                            </Button>\n                        </div>\n                    </Card>\n                </ClickAwayListener>\n            ) : (\n                <div className=\"flex\">\n                    <Button\n                        className=\"font-medium flex-grow border-radius-0\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => openAddCard(true)}\n                    >\n                        + Add Card\n                    </Button>\n                </div>\n            )}\n        </Card>\n    )\n}\n\nexport default BoardList\n","import React, { useState } from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport CardEditorDialog from './CardEditorDialog'\nimport Scrollbar from 'react-perfect-scrollbar'\nimport BoardList from './BoardList'\nimport {\n    Avatar,\n    Card,\n    ClickAwayListener,\n    TextField,\n    InputAdornment,\n    IconButton,\n    Icon,\n    Button,\n} from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    reorderCardInList,\n    reorderList,\n    moveCardInList,\n} from '../../redux/actions/ScrumBoardActions'\n\nconst ScrumBoardContainer = ({\n    list = [],\n    handleAddList,\n    handleAddNewCard,\n}) => {\n    const [card, setCard] = useState(null)\n    const [shouldOpenDialog, setShouldOpenDialog] = useState(false)\n    const [shouldOpenAddList, setShouldOpenAddList] = useState(false)\n    const [columnTitle, setColumnTitle] = useState('')\n\n    const dispatch = useDispatch()\n    const { board = {} } = useSelector((state) => state.scrumboard)\n\n    const handleCardClick = (card) => {\n        setCard(card)\n        setShouldOpenDialog(true)\n    }\n\n    const handleDialogClose = () => {\n        setShouldOpenDialog(false)\n    }\n\n    const handleAddListToggle = (value) => {\n        setShouldOpenAddList(value)\n    }\n\n    const handleChange = (event) => {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            handleAddList(columnTitle)\n            setColumnTitle('')\n        } else setColumnTitle(event.target.value)\n    }\n\n    const onDragEnd = (result) => {\n        const { source, destination } = result\n\n        // if dropped outside of list\n        if (!destination) {\n            return\n        }\n\n        if (source.droppableId === 'horizontal-droppable') {\n            dispatch(reorderList(board.id, source.index, destination.index))\n        } else {\n            if (source.droppableId === destination.droppableId) {\n                dispatch(\n                    reorderCardInList(\n                        board.id,\n                        source.droppableId,\n                        source.index,\n                        destination.index\n                    )\n                )\n            } else {\n                dispatch(\n                    moveCardInList(\n                        board.id,\n                        source.droppableId,\n                        destination.droppableId,\n                        source,\n                        destination\n                    )\n                )\n            }\n        }\n    }\n\n    return (\n        <Scrollbar className=\"relative flex pb-4 w-full\">\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable\n                    droppableId=\"horizontal-droppable\"\n                    direction=\"horizontal\"\n                >\n                    {(provided) => (\n                        <div\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                            className=\"flex\"\n                        >\n                            {list.map((column, index) => (\n                                <Draggable\n                                    key={column.id}\n                                    draggableId={column.id}\n                                    index={index}\n                                    type=\"column\"\n                                >\n                                    {(provided, snapshot) => (\n                                        <BoardList\n                                            data={{\n                                                provided,\n                                                snapshot,\n                                                column,\n                                            }}\n                                            handleCardClick={handleCardClick}\n                                            handleDialogClose={\n                                                handleDialogClose\n                                            }\n                                            handleAddNewCard={handleAddNewCard}\n                                        ></BoardList>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n\n            <div>\n                {shouldOpenAddList ? (\n                    <ClickAwayListener\n                        onClickAway={() => handleAddListToggle(false)}\n                    >\n                        <Card\n                            className=\"mx-3 border-radius-0 cursor-pointer p-4 min-w-288\"\n                            elevation={3}\n                        >\n                            <TextField\n                                size=\"small\"\n                                className=\"mb-3\"\n                                variant=\"outlined\"\n                                name=\"columnTitle\"\n                                value={columnTitle}\n                                fullWidth\n                                onChange={handleChange}\n                                onKeyDown={handleChange}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <IconButton\n                                                size=\"small\"\n                                                onClick={() =>\n                                                    handleAddListToggle(false)\n                                                }\n                                            >\n                                                <Icon fontSize=\"small\">\n                                                    clear\n                                                </Icon>\n                                            </IconButton>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                            <div className=\"flex justify-end\">\n                                <Button\n                                    onClick={() => {\n                                        handleAddList(columnTitle)\n                                        setColumnTitle('')\n                                    }}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                >\n                                    Add\n                                </Button>\n                            </div>\n                        </Card>\n                    </ClickAwayListener>\n                ) : (\n                    <Card\n                        className=\"mx-3 cursor-pointer flex items-center py-4 px-4 bg-light-gray min-w-288\"\n                        elevation={3}\n                        onClick={() => handleAddListToggle(true)}\n                    >\n                        <Avatar className=\"size-24 bg-error\">+</Avatar>\n                        <span className=\"ml-8 font-medium\">Add List</span>\n                    </Card>\n                )}\n            </div>\n\n            {shouldOpenDialog && (\n                <CardEditorDialog\n                    card={card}\n                    open={shouldOpenDialog}\n                    handleClose={handleDialogClose}\n                ></CardEditorDialog>\n            )}\n        </Scrollbar>\n    )\n}\n\nexport default ScrumBoardContainer\n","import React, { useEffect } from 'react'\nimport {\n    Icon,\n    IconButton,\n    Avatar,\n    Tooltip,\n    FormControlLabel,\n    Checkbox,\n} from '@material-ui/core'\nimport ScrumBoardContainer from './ScrumBoardContainer'\nimport { Link, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { MatxMenu } from 'app/components'\n\nimport {\n    getBoardById,\n    addListInBoard,\n    getAllMembers,\n    getAllLabels,\n    addMemberInBoard,\n    addNewCardInList,\n    deleteMemberFromBoard,\n} from '../../redux/actions/ScrumBoardActions'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\n    avatar: {\n        border: '2px solid white',\n    },\n}))\n\nconst Board = () => {\n    const { board = {}, memberList = [] } = useSelector(\n        (state) => state.scrumboard\n    )\n\n    const { id: boardId } = useParams()\n    const dispatch = useDispatch()\n    const classes = useStyles()\n\n    useEffect(() => {\n        dispatch(getBoardById(boardId))\n        dispatch(getAllMembers())\n        dispatch(getAllLabels())\n    }, [boardId, dispatch])\n\n    const handleAddList = (listTitle) => {\n        if (listTitle !== '') {\n            dispatch(\n                addListInBoard({\n                    boardId,\n                    listTitle,\n                })\n            )\n        }\n    }\n\n    const handleAddNewCard = (cardData) => {\n        dispatch(\n            addNewCardInList({\n                boardId,\n                ...cardData,\n            })\n        )\n    }\n\n    const handleChange = (event) => {\n        let memberId = event.target.value\n        let { members, id } = board\n\n        if (members.some((member) => member.id === memberId)) {\n            dispatch(deleteMemberFromBoard({ boardId: id, memberId }))\n        } else dispatch(addMemberInBoard({ boardId: id, memberId }))\n    }\n\n    let { members = [], title, list = [] } = board\n\n    return (\n        <div className=\"scrum-board m-sm-30\">\n            <div className=\"flex flex-wrap items-center justify-between mb-4\">\n                <div className=\"flex items-center\">\n                    <Link to=\"/scrum-board\">\n                        <IconButton>\n                            <Icon>arrow_back</Icon>\n                        </IconButton>\n                    </Link>\n                    <h5 className=\"m-0 ml-2 capitalize\">{title}</h5>\n                    <IconButton className=\"ml-2\">\n                        <Icon>star_outline</Icon>\n                    </IconButton>\n                </div>\n\n                <div className=\"flex relative mr-2 items-center\">\n                    {members.map((member, index) => (\n                        <Tooltip\n                            key={index}\n                            title={member.name}\n                            fontSize=\"large\"\n                        >\n                            <Avatar\n                                className={clsx(\n                                    'h-24 w-24 ml--2',\n                                    classes.avatar\n                                )}\n                                src={member.avatar}\n                            />\n                        </Tooltip>\n                    ))}\n                    <MatxMenu\n                        horizontalPosition=\"right\"\n                        shouldCloseOnItemClick={false}\n                        menuButton={\n                            <Tooltip title={'Add'} fontSize=\"large\">\n                                <Avatar\n                                    className={clsx(\n                                        'h-24 w-24 ml--2 cursor-pointer',\n                                        classes.avatar\n                                    )}\n                                >\n                                    +\n                                </Avatar>\n                            </Tooltip>\n                        }\n                    >\n                        {memberList.map((user) => (\n                            <FormControlLabel\n                                className=\"ml-0\"\n                                key={user.id}\n                                control={\n                                    <Checkbox\n                                        checked={members.some(\n                                            (member) => member.id === user.id\n                                        )}\n                                        onChange={handleChange}\n                                        value={user.id}\n                                    />\n                                }\n                                label={\n                                    <div className=\"flex items-center\">\n                                        <Avatar\n                                            src={user.avatar}\n                                            className=\"size-24\"\n                                        ></Avatar>\n                                        <span className=\"ml-3\">\n                                            {user.name}\n                                        </span>\n                                    </div>\n                                }\n                            />\n                        ))}\n                    </MatxMenu>\n                    {/* <Avatar className=\"number-avatar avatar\">+3</Avatar> */}\n                </div>\n            </div>\n\n            <div className=\"relative\">\n                <ScrumBoardContainer\n                    list={list}\n                    handleAddList={handleAddList}\n                    handleAddNewCard={handleAddNewCard}\n                ></ScrumBoardContainer>\n            </div>\n        </div>\n    )\n}\n\nexport default Board\n"],"sourceRoot":""}